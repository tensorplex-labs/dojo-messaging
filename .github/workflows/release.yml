name: Release
on:
  push:
    branches:
      - main
      - staging

permissions:
  contents: read # for checkout

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/dojo-messaging
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance and PyPI trusted publishing
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install semantic-release dependencies
        run: |
          npm install \
            @semantic-release/changelog \
            @semantic-release/git \
            @semantic-release/github \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator \
            conventional-changelog-conventionalcommits
      - name: Release
        id: semantic_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Run semantic-release and capture if a release was published
          npx semantic-release 2>&1 | tee semantic-release.log
          
          # Check if semantic-release created a release
          if grep -q "Published release " semantic-release.log; then
            echo "release_created=true" >> $GITHUB_OUTPUT
            echo "Release was created by semantic-release"
          else
            echo "release_created=false" >> $GITHUB_OUTPUT
            echo "No release created by semantic-release"
          fi

      - name: Install build dependencies
        if: steps.semantic_release.outputs.release_created == 'true'
        run: |
          python -m pip install --upgrade pip
          python -m pip install build

      - name: Verify version matches
        if: steps.semantic_release.outputs.release_created == 'true'
        run: |
          PACKAGE_VERSION=$(python -c "from setuptools_scm import get_version; print(get_version())")
          GIT_TAG=$(git describe --tags --exact-match HEAD)
          echo "Package version: $PACKAGE_VERSION"
          echo "Git tag: $GIT_TAG"
          
      - name: Build distribution packages
        if: steps.semantic_release.outputs.release_created == 'true'
        run: python -m build

      - name: Publish distribution packages to PyPI
        if: steps.semantic_release.outputs.release_created == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
